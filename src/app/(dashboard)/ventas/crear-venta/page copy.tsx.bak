'use client';

import { PageHeader } from '@/components/common/PageHeader';
import { Check, ChevronLeft, ChevronRight, User } from 'lucide-react';
import { Stepper } from '@/components/ui/stepper';
import { useStepper } from '@/hooks/stepper/useStepper';
import { Button } from '@/components/ui/button';
import * as React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/components/ui/table';
import {
  LeadsVendorItems,
  ProyectBlocksItems,
  ProyectLotsItems,
  ProyectsActivesItems,
  ProyectStagesItems
} from '@/types/sales';
import { useLeadsVendor } from '../hooks/useLeadsVendor';
import { InformationSetp } from '../components/InformationSetp';
import { ClientStep } from '../components/ClientStep';
import { useClients } from '../hooks/useClients';
import { toast } from 'sonner';
import { useAmortization } from '../hooks/useAmortization';
import { DateFormatDisplay } from '@/components/common/table/DateFormatDisplay';

import { motion } from 'framer-motion';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';

type SaleData = {
  lotId: string;
  saleType: 'CASH' | 'FINANCED';
  clientId: number;
  reservationId: string;
  guarantorId: number;
  paymentDate: string;
  saleDate: string;
  contractDate: string;
  methodPayment: string;
  totalAmount: number;
  // Campos HU
  totalAmountUrbanDevelopment: number;
  quantityHuCuotes: number;
  initialAmountUrbanDevelopment: number;
  firstPaymentDateHu: string;
  // Campos financiamiento
  initialAmount: number;
  interestRate: number;
  quantitySaleCoutes: number;
  financingInstallments: Array<{
    couteAmount: number;
    expectedPaymentDate: string;
  }>;
};

const _steps = [{ id: 'setp_01' }, { id: 'setp_02' }, { id: 'setp_03' }, { id: 'setp_04' }];

export default function Page() {
  const { steps, currentStepId, nextStep, prevStep } = useStepper(_steps);

  const [selectedProject, setSelectedProject] = React.useState<ProyectsActivesItems | null>(null);
  const [selectedStage, setSelectedStage] = React.useState<ProyectStagesItems | null>(null);
  const [selectedBlock, setSelectedBlock] = React.useState<ProyectBlocksItems | null>(null);
  const [selectedLot, setSelectedLot] = React.useState<ProyectLotsItems | null>(null);
  const [selectedLeadVendor, setSelectedLeadVendor] = React.useState<LeadsVendorItems | null>(null);
  const [paymentMethod, setPaymentMethod] = React.useState<'Cash' | 'Financiado' | null>(null);

  const [saleData, setSaleData] = React.useState<SaleData>({
    lotId: '',
    saleType: 'FINANCED',
    clientId: 0,
    reservationId: '',
    guarantorId: 0,
    paymentDate: '',
    saleDate: '',
    contractDate: '',
    methodPayment: 'VOUCHER',
    totalAmount: 0,
    totalAmountUrbanDevelopment: 0,
    quantityHuCuotes: 0,
    initialAmountUrbanDevelopment: 0,
    firstPaymentDateHu: '',
    initialAmount: 0,
    interestRate: 0,
    quantitySaleCoutes: 0,
    financingInstallments: []
  });

  const { data: leadsData } = useLeadsVendor();
  const { client, searchClient, createClientGuarantor } = useClients();

  React.useEffect(() => {
    if (selectedLeadVendor?.document) {
      searchClient(Number(selectedLeadVendor.document));
    }
  }, [selectedLeadVendor?.document, searchClient]);

  React.useEffect(() => {
    if (selectedLot) {
      setSaleData((prev) => ({
        ...prev,
        lotId: selectedLot.id,
        totalAmount: Number(selectedLot.lotPrice),
        totalAmountUrbanDevelopment: Number(selectedLot.urbanizationPrice) || 0
      }));
    }
  }, [selectedLot]);

  React.useEffect(() => {
    if (paymentMethod) {
      setSaleData((prev) => ({
        ...prev,
        saleType: paymentMethod === 'Financiado' ? 'FINANCED' : 'CASH'
      }));
    }
  }, [paymentMethod]);

  React.useEffect(() => {
    if (client) {
      setSaleData((prev) => ({
        ...prev,
        clientId: client.id
      }));
    }
  }, [client]);

  const handleNextStep = () => {
    if (
      currentStepId === 'setp_01' &&
      !selectedLot &&
      !selectedStage &&
      !selectedBlock &&
      !selectedProject
    ) {
      toast.error('Completa todos los requisitos');
      return;
    }

    if (currentStepId === 'setp_03' && !client) {
      toast.error('Debes seleccionar un cliente');
      return;
    }

    nextStep();
  };

  const handleSubmitSale = async () => {
    try {
      if (!saleData.lotId) {
        throw new Error('Debe seleccionar un lote');
      }
      if (!saleData.clientId) {
        throw new Error('Debe seleccionar un cliente');
      }
      if (saleData.saleType === 'FINANCED' && saleData.financingInstallments.length === 0) {
        throw new Error('Debe configurar las cuotas de financiamiento');
      }

      const loadingToast = toast.loading('Guardando venta...');

      const response = await fetch('/api/sales', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(saleData)
      });

      toast.dismiss(loadingToast);

      if (!response.ok) {
        throw new Error('Error al guardar la venta');
      }

      await response.json();
      toast.success('Venta creada exitosamente');
    } catch (error) {
      if (error instanceof Error) toast.error(error.message);
    }
  };

  const [includeDecimal, setIncludeDecimal] = React.useState<boolean>(false);
  const [formValues, setFormValues] = React.useState({
    totalAmount: Number(selectedLot?.lotPrice) || 0,
    initialAmount: 0,
    reservationAmount: 200.0,
    interestRate: 12,
    numberOfPayments: 1,
    firstPaymentDate: ''
  });

  const { data: amortizationData, calculateAmortization } = useAmortization({
    ...formValues,
    includeDecimals: includeDecimal
  });

  React.useEffect(() => {
    if (amortizationData.length > 0) {
      setSaleData((prev) => ({
        ...prev,
        initialAmount: formValues.initialAmount,
        interestRate: formValues.interestRate,
        quantitySaleCoutes: formValues.numberOfPayments,
        financingInstallments: amortizationData.map((item) => ({
          couteAmount: item.couteAmount,
          expectedPaymentDate: item.expectedPaymentDate
        }))
      }));
    }
  }, [
    amortizationData,
    formValues.initialAmount,
    formValues.interestRate,
    formValues.numberOfPayments
  ]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value, type } = e.target;

    setFormValues((prev) => ({
      ...prev,
      [id]: type === 'date' ? value : Number(value) || 0
    }));
  };

  React.useEffect(() => {
    if (selectedLot?.lotPrice !== undefined) {
      setFormValues((prev) => ({
        ...prev,
        totalAmount: Number(selectedLot.lotPrice)
      }));
    }
  }, [selectedLot?.lotPrice]);

  const stepContent = () => {
    switch (currentStepId) {
      case 'setp_01':
        return (
          <InformationSetp
            selectedProject={selectedProject}
            selectedStage={selectedStage}
            selectedBlock={selectedBlock}
            selectedLot={selectedLot}
            paymentMethod={paymentMethod}
            setSelectedProject={setSelectedProject}
            setSelectedStage={setSelectedStage}
            setSelectedBlock={setSelectedBlock}
            setSelectedLot={setSelectedLot}
            setPaymentMethod={setPaymentMethod}
          />
        );
      case 'setp_02':
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="flex flex-col gap-4"
          >
            <div className="rounded border-l-2 border-green-600 bg-gray-50 p-4 dark:border-green-700 dark:bg-gray-900">
              <h3 className="text-base font-medium text-[#035c64] dark:text-slate-200">
                MÃ©todo de pago <strong>{paymentMethod}</strong>
              </h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit.
              </p>
            </div>
            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <div className="space-y-1">
                <label
                  htmlFor="totalAmount"
                  className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                >
                  Precio lote:
                </label>
                <Input
                  id="totalAmount"
                  type="number"
                  placeholder="Precio total"
                  value={formValues.totalAmount}
                  onChange={handleInputChange}
                  className="bg-background w-full"
                />
              </div>
              {Number(selectedLot?.urbanizationPrice) > 0.0 && (
                <div className="space-y-1">
                  <label className="block text-sm font-medium text-gray-600 dark:text-gray-300">
                    Precio HU:
                  </label>
                  <Input
                    placeholder="HU"
                    defaultValue={selectedLot?.urbanizationPrice}
                    className="bg-background w-full"
                  />
                </div>
              )}
            </div>
            {Number(selectedLot?.urbanizationPrice) > 0 && (
              <div className="">
                <div className="py-2">
                  <h3 className="text-primary inline-flex items-center gap-2 text-base font-medium dark:text-gray-300">
                    <User /> Financiamiento de HU
                  </h3>
                </div>

                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
                  <div className="space-y-1">
                    <label
                      htmlFor="numCuotas"
                      className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                    >
                      NÂº Cuotas:
                    </label>
                    <Input
                      id="numCuotas"
                      placeholder="NÂº cuotas"
                      className="bg-background w-full"
                    />
                  </div>

                  <div className="space-y-1">
                    <label
                      htmlFor="inicial"
                      className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                    >
                      Inicial:
                    </label>
                    <Input
                      id="inicial"
                      placeholder="Inicial"
                      defaultValue={selectedLot?.urbanizationPrice}
                      className="bg-background w-full"
                    />
                  </div>

                  <div className="space-y-1">
                    <label
                      htmlFor="fechaInicial"
                      className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                    >
                      Fecha inicial de pago:
                    </label>
                    <Input id="fechaInicial" type="date" className="bg-background w-full" />
                  </div>
                </div>
              </div>
            )}
            {paymentMethod == 'Financiado' && (
              <>
                <div className="">
                  <div className="py-2">
                    <h3 className="text-primary inline-flex items-center gap-2 text-base font-medium dark:text-gray-300">
                      <User /> Financiamiento de Lote
                    </h3>
                  </div>
                  <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
                    <div className="space-y-1">
                      <label
                        htmlFor="numberOfPayments"
                        className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                      >
                        NÂº Cuotas:
                      </label>
                      <Input
                        type="number"
                        id="numberOfPayments"
                        min={1}
                        max={72}
                        defaultValue={formValues.numberOfPayments}
                        onChange={handleInputChange}
                        placeholder="NÂº cuotas"
                        className="bg-background w-full"
                      />
                    </div>
                    <div className="space-y-1">
                      <label
                        htmlFor="initialAmount"
                        className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                      >
                        Precio Inicial:
                      </label>
                      <Input
                        type="number"
                        id="initialAmount"
                        value={formValues.initialAmount}
                        onChange={handleInputChange}
                        placeholder="Precio Inicial"
                        className="bg-background w-full"
                      />
                    </div>
                    <div className="space-y-1">
                      <label
                        htmlFor="interestRate"
                        className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                      >
                        Interes:
                      </label>
                      <Input
                        type="number"
                        id="interestRate"
                        min={12}
                        defaultValue={formValues.interestRate}
                        onChange={handleInputChange}
                        placeholder="Interes"
                        className="bg-background w-full"
                      />
                    </div>
                    <div className="space-y-1">
                      <label
                        htmlFor="firstPaymentDate"
                        className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                      >
                        Fecha inicial de pago:
                      </label>
                      <Input
                        type="date"
                        id="firstPaymentDate"
                        value={formValues.firstPaymentDate}
                        onChange={handleInputChange}
                        className="bg-background w-full"
                      />
                    </div>
                    <div className="space-y-1">
                      <label
                        htmlFor="includeDecimals"
                        className="block text-sm font-medium text-gray-600 dark:text-gray-300"
                      >
                        Incluir decimales:
                      </label>
                      <Checkbox
                        id="includeDecimals"
                        checked={includeDecimal}
                        onCheckedChange={() => setIncludeDecimal(!includeDecimal)}
                        className="h-5 w-5 rounded-full bg-gray-100"
                      />
                    </div>
                    <div className="space-y-1">
                      <Button
                        onClick={calculateAmortization}
                        variant="outline"
                        size="icon"
                        className="w-full bg-gradient-to-r from-[#025864] to-[#00CA7C] px-2 font-normal text-white hover:text-slate-200"
                      >
                        Calcular Tabla
                      </Button>
                    </div>
                  </div>
                </div>
                <div className="overflow-hidden rounded-md border bg-slate-50 dark:bg-gray-900">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>NÂº Cuotas</TableHead>
                        <TableHead>Precio</TableHead>
                        <TableHead>Fecha</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {amortizationData.length > 0 ? (
                        amortizationData.map((amort, i) => (
                          <TableRow key={i}>
                            <TableCell>{i + 1}</TableCell>
                            <TableCell>
                              <Input
                                className="bg-white dark:bg-gray-900"
                                type="number"
                                defaultValue={amort.couteAmount}
                                placeholder="cuota"
                              />
                            </TableCell>
                            <TableCell>
                              <DateFormatDisplay date={amort.expectedPaymentDate} />
                            </TableCell>
                          </TableRow>
                        ))
                      ) : (
                        <TableRow>
                          <TableCell colSpan={7} className="text-muted-foreground h-24 text-center">
                            Sin registros existentes.
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </div>
              </>
            )}
          </motion.div>
        );
      case 'setp_03':
        return (
          <ClientStep
            client={client}
            selectedLeadVendor={selectedLeadVendor}
            setSelectedLeadVendor={setSelectedLeadVendor}
            leadsData={leadsData}
            createClientGuarantor={createClientGuarantor}
          />
        );
      case 'setp_04':
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium">Resumen de la venta</h3>
            <pre className="rounded-md bg-gray-100 p-4 text-sm">
              {JSON.stringify(saleData, null, 2)}
            </pre>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="container pt-8">
      <PageHeader
        icon={User}
        title="Crear Venta"
        subtitle="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        variant="default"
      />
      <div className="container">
        <Stepper steps={steps} currentStepId={currentStepId} className="mb-4" />

        <div className="rounded-lg border bg-white p-4 dark:bg-gray-900">
          {stepContent()}
          <div className="mt-8 flex justify-between">
            <Button
              className="text-sm font-normal"
              variant="outline"
              onClick={prevStep}
              disabled={currentStepId === _steps[0].id}
            >
              <ChevronLeft className="h-4 w-4" />
              Anterior
            </Button>

            {currentStepId !== _steps[_steps.length - 1].id ? (
              <Button
                className="border border-blue-500 bg-blue-500 text-sm font-normal transition-colors hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700"
                onClick={handleNextStep}
              >
                Siguiente
                <ChevronRight className="h-4 w-4 font-normal" />
              </Button>
            ) : (
              <Button
                onClick={handleSubmitSale}
                className="bg-gradient-to-r from-[#025864] to-[#00CA7C] font-normal"
              >
                Finalizar <Check className="" />
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

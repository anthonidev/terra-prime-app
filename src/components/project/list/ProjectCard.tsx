import { Badge } from "@/components/ui/badge";import { Button } from "@/components/ui/button";import {  Card,  CardContent,  CardFooter,  CardHeader,  CardTitle,} from "@/components/ui/card";import { ProjectListItemDto } from "@/types/project.types";import { motion } from "framer-motion";import {  Building,  Building2,  Calendar,  ChevronRight,  Layers,} from "lucide-react";import Image from "next/image";import Link from "next/link";type Props = {  project: ProjectListItemDto;  index: number;  formatDate: (date: Date) => string;};const ProjectCard = ({ project, formatDate, index }: Props) => {  return (    <motion.div      key={project.id}      initial={{ opacity: 0, y: 20 }}      animate={{ opacity: 1, y: 0 }}      exit={{ opacity: 0, y: -20 }}      transition={{ delay: index * 0.05 }}    >      <Link href={`/proyectos/detalle/${project.id}`} className="block h-full">        <Card className="h-full hover:shadow-md transition-all duration-200 hover:border-primary/50 group overflow-hidden flex flex-col">          <div            className={`h-2 w-full ${              project.isActive ? "bg-primary" : "bg-muted-foreground"            }`}          />          <CardHeader className="pb-2">            <div className="flex justify-between items-center">              <CardTitle className="text-lg line-clamp-1 group-hover:text-primary transition-colors">                {project.name}              </CardTitle>              <Badge                variant={project.isActive ? "default" : "secondary"}                className="text-xs"              >                {project.isActive ? "Activo" : "Inactivo"}              </Badge>            </div>            <p className="text-sm text-muted-foreground">              {project.currency === "PEN" ? "Soles (S/)" : "DÃ³lares ($)"}            </p>          </CardHeader>          <CardContent className="pb-4 flex-grow">            <div className="flex items-center gap-3 mb-3">              {project.logo ? (                <div className="h-14 w-14 flex items-center justify-center p-1 rounded-md bg-secondary/50">                  <Image                    width={48}                    height={48}                    src={project.logo}                    alt={`Logo de ${project.name}`}                    className="max-h-12 max-w-12 object-contain"                  />                </div>              ) : (                <div className="h-14 w-14 flex items-center justify-center rounded-md bg-primary/10">                  <Building2 className="h-8 w-8 text-primary/80" />                </div>              )}              <div className="flex-1 flex flex-col gap-1.5">                <div className="flex items-center text-sm text-muted-foreground">                  <Building className="h-4 w-4 mr-1.5 text-primary/70" />                  <span>                    <span className="font-medium">{project.stageCount}</span>{" "}                    Etapas                  </span>                </div>                <div className="flex items-center text-sm text-muted-foreground">                  <Layers className="h-4 w-4 mr-1.5 text-primary/70" />                  <span>                    <span className="font-medium">{project.blockCount}</span>{" "}                    Manzanas                  </span>                </div>                {}                {project.lotCount > 0 && (                  <div className="mt-1">                    <div className="flex justify-between text-xs text-muted-foreground mb-1.5">                      <span>Lotes activos</span>                      <span className="font-medium">                        {project.activeLotCount}/{project.lotCount}                      </span>                    </div>                    <div className="h-1.5 bg-secondary/50 rounded-full overflow-hidden">                      <div                        className="h-full bg-primary rounded-full transition-all"                        style={{                          width: `${(project.activeLotCount / project.lotCount) * 100}%`,                        }}                      />                    </div>                  </div>                )}              </div>            </div>          </CardContent>          <CardFooter className="mt-auto pt-2 border-t flex justify-between items-center">            <div className="flex items-center text-xs text-muted-foreground">              <Calendar className="h-3.5 w-3.5 mr-1.5" />              <span>{formatDate(project.updatedAt)}</span>            </div>            <Button              variant="ghost"              size="sm"              className="text-sm hover:text-primary group-hover:bg-primary/10 transition-colors gap-1"            >              Ver detalles              <ChevronRight className="h-4 w-4 transition-transform group-hover:translate-x-0.5" />            </Button>          </CardFooter>        </Card>      </Link>    </motion.div>  );};export default ProjectCard;